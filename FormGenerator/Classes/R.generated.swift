//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
      /// Image `descriptorIcon`.
      static let descriptorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "descriptorIcon")
    /// Image `IconCloseAttachment`.
    static let iconCloseAttachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconCloseAttachment")
    /// Image `downArrow`.
    static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downArrow")
    /// Image `hidePasswordIcon`.
    static let hidePasswordIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "hidePasswordIcon")
    /// Image `iconPdf`.
    static let iconPdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPdf")
    /// Image `iconPlusFilled`.
    static let iconPlusFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPlusFilled")
    /// Image `iconUpload`.
    static let iconUpload = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUpload")
    /// Image `image_not_found`.
    static let image_not_found = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_not_found")
    /// Image `image_place_holder`.
    static let image_place_holder = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_place_holder")
    /// Image `showPasswordIcon`.
    static let showPasswordIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "showPasswordIcon")
    
    static let iconEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEdit")
    
    static let profilePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfilePlaceholder")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconCloseAttachment", bundle: ..., traitCollection: ...)`
    static func iconCloseAttachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCloseAttachment, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
      /// `UIImage(named: "descriptorIcon", bundle: ..., traitCollection: ...)`
      static func descriptorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.descriptorIcon, compatibleWith: traitCollection)
    }
    #endif
      
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconCloseAttachment", bundle: ..., traitCollection: ...)`
    static func profilePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downArrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hidePasswordIcon", bundle: ..., traitCollection: ...)`
    static func hidePasswordIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hidePasswordIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPdf", bundle: ..., traitCollection: ...)`
    static func iconPdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPdf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPlusFilled", bundle: ..., traitCollection: ...)`
    static func iconPlusFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlusFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUpload", bundle: ..., traitCollection: ...)`
    static func iconUpload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUpload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_not_found", bundle: ..., traitCollection: ...)`
    static func image_not_found(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_not_found, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_place_holder", bundle: ..., traitCollection: ...)`
    static func image_place_holder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_place_holder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "showPasswordIcon", bundle: ..., traitCollection: ...)`
    static func showPasswordIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showPasswordIcon, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "showPasswordIcon", bundle: ..., traitCollection: ...)`
    static func iconEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEdit, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `ConsentView`.
    static let consentView = _R.nib._ConsentView()
    /// Nib `ItemDetailsCell`.
    static let itemDetailsCell = _R.nib._ItemDetailsCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ConsentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.consentView) instead")
    static func consentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.consentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ItemDetailsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemDetailsCell) instead")
    static func itemDetailsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailsCell)
    }
    #endif

    static func consentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.consentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func itemDetailsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailsCell? {
      return R.nib.itemDetailsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailsCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 32 localization keys.
    struct localizable {
      /// en translation: Alert
      ///
      /// Locales: en, ar
      static let alert = Rswift.StringResource(key: "alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Both passwords must be the same
      ///
      /// Locales: en, ar
      static let bothPasswordsMustBeTheSame = Rswift.StringResource(key: "bothPasswordsMustBeTheSame", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ar
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Email is not valid
      ///
      /// Locales: en, ar
      static let emailIsNotValid = Rswift.StringResource(key: "emailIsNotValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Fair
      ///
      /// Locales: en, ar
      static let fair = Rswift.StringResource(key: "fair", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: File size can't exceed
      ///
      /// Locales: en, ar
      static let fileSizeCantExceed = Rswift.StringResource(key: "fileSizeCantExceed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Files
      ///
      /// Locales: en, ar
      static let files = Rswift.StringResource(key: "files", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Images
      ///
      /// Locales: en, ar
      static let images = Rswift.StringResource(key: "images", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Invalid Media
      ///
      /// Locales: en, ar
      static let invalidMedia = Rswift.StringResource(key: "invalidMedia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: MB
      ///
      /// Locales: en, ar
      static let megaByte = Rswift.StringResource(key: "megaByte", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Name must not be empty
      ///
      /// Locales: en, ar
      static let nameMustNotBeEmpty = Rswift.StringResource(key: "nameMustNotBeEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Name must not be less than 2 characters
      ///
      /// Locales: en, ar
      static let nameMustNotBeLessThan2Characters = Rswift.StringResource(key: "nameMustNotBeLessThan2Characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Name must not contain special characters
      ///
      /// Locales: en, ar
      static let nameMustNotContainSpecialCharacters = Rswift.StringResource(key: "nameMustNotContainSpecialCharacters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Number of items cannot be less than
      ///
      /// Locales: en, ar
      static let numberOfItemsCannotBeLessThan = Rswift.StringResource(key: "numberOfItemsCannotBeLessThan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Number of items cannot be more than
      ///
      /// Locales: en, ar
      static let numberOfItemsCannotBeMoreThan = Rswift.StringResource(key: "numberOfItemsCannotBeMoreThan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ar
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, ar
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Phone number is not valid
      ///
      /// Locales: en, ar
      static let phoneNumberIsNotValid = Rswift.StringResource(key: "phoneNumberIsNotValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please Enter a strong password
      ///
      /// Locales: en, ar
      static let pleaseEnterStrongPassword = Rswift.StringResource(key: "pleaseEnterStrongPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: en, ar
      static let remove = Rswift.StringResource(key: "remove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Selected files can't be more than
      ///
      /// Locales: en, ar
      static let selectedFilesCantBeMoreThan = Rswift.StringResource(key: "selectedFilesCantBeMoreThan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Strong
      ///
      /// Locales: en, ar
      static let strong = Rswift.StringResource(key: "strong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Very Strong
      ///
      /// Locales: en, ar
      static let veryStrong = Rswift.StringResource(key: "veryStrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Very Weak
      ///
      /// Locales: en, ar
      static let veryWeak = Rswift.StringResource(key: "veryWeak", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Weak
      ///
      /// Locales: en, ar
      static let weak = Rswift.StringResource(key: "weak", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You can't pick more than
      ///
      /// Locales: en, ar
      static let youCantPickMoreThan = Rswift.StringResource(key: "youCantPickMoreThan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You must select a date
      ///
      /// Locales: en, ar
      static let youMustSelectDate = Rswift.StringResource(key: "youMustSelectDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You must select a value
      ///
      /// Locales: en, ar
      static let youMustSelectValue = Rswift.StringResource(key: "youMustSelectValue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You must select an item
      ///
      /// Locales: en, ar
      static let youMustSelectItem = Rswift.StringResource(key: "youMustSelectItem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: files
      ///
      /// Locales: en, ar
      static let filesSmall = Rswift.StringResource(key: "filesSmall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: images
      ///
      /// Locales: en, ar
      static let imagesSmall = Rswift.StringResource(key: "imagesSmall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: items
      ///
      /// Locales: en, ar
      static let itemsSmall = Rswift.StringResource(key: "itemsSmall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)

      /// en translation: Alert
      ///
      /// Locales: en, ar
      static func alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert"
        }

        return NSLocalizedString("alert", bundle: bundle, comment: "")
      }

      /// en translation: Both passwords must be the same
      ///
      /// Locales: en, ar
      static func bothPasswordsMustBeTheSame(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bothPasswordsMustBeTheSame", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bothPasswordsMustBeTheSame"
        }

        return NSLocalizedString("bothPasswordsMustBeTheSame", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ar
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Email is not valid
      ///
      /// Locales: en, ar
      static func emailIsNotValid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailIsNotValid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailIsNotValid"
        }

        return NSLocalizedString("emailIsNotValid", bundle: bundle, comment: "")
      }

      /// en translation: Fair
      ///
      /// Locales: en, ar
      static func fair(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fair", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fair"
        }

        return NSLocalizedString("fair", bundle: bundle, comment: "")
      }

      /// en translation: File size can't exceed
      ///
      /// Locales: en, ar
      static func fileSizeCantExceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fileSizeCantExceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fileSizeCantExceed"
        }

        return NSLocalizedString("fileSizeCantExceed", bundle: bundle, comment: "")
      }

      /// en translation: Files
      ///
      /// Locales: en, ar
      static func files(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("files", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "files"
        }

        return NSLocalizedString("files", bundle: bundle, comment: "")
      }

      /// en translation: Images
      ///
      /// Locales: en, ar
      static func images(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("images", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "images"
        }

        return NSLocalizedString("images", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Media
      ///
      /// Locales: en, ar
      static func invalidMedia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidMedia", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalidMedia"
        }

        return NSLocalizedString("invalidMedia", bundle: bundle, comment: "")
      }
        
        /// en translation: There are no values to select from
        ///
        /// Locales: en, ar
        static func thereAreNoValuesToSelectFrom(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("thereAreNoValuesToSelectFrom", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "thereAreNoValuesToSelectFrom"
          }

          return NSLocalizedString("thereAreNoValuesToSelectFrom", bundle: bundle, comment: "")
        }
        
        /// en translation: You must select a country
        ///
        /// Locales: en, ar
        static func youMustSelectCountry(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("youMustSelectCountry", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "youMustSelectCountry"
          }

          return NSLocalizedString("youMustSelectCountry", bundle: bundle, comment: "")
        }

      /// en translation: MB
      ///
      /// Locales: en, ar
      static func megaByte(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("megaByte", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "megaByte"
        }

        return NSLocalizedString("megaByte", bundle: bundle, comment: "")
      }
        
        /// en translation: Add
        ///
        /// Locales: en, ar
        static func add(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("add", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "add"
          }

          return NSLocalizedString("add", bundle: bundle, comment: "")
        }
        
        /// en translation: You cannot select the same value twice
        ///
        /// Locales: en, ar
        static func youCannotSelectTheSameValueTwice(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("youCannotSelectTheSameValueTwice", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "youCannotSelectTheSameValueTwice"
          }

          return NSLocalizedString("youCannotSelectTheSameValueTwice", bundle: bundle, comment: "")
        }

      /// en translation: Name must not be empty
      ///
      /// Locales: en, ar
      static func nameMustNotBeEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nameMustNotBeEmpty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nameMustNotBeEmpty"
        }

        return NSLocalizedString("nameMustNotBeEmpty", bundle: bundle, comment: "")
      }

      /// en translation: Name must not be less than 2 characters
      ///
      /// Locales: en, ar
      static func nameMustNotBeLessThan2Characters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nameMustNotBeLessThan2Characters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nameMustNotBeLessThan2Characters"
        }

        return NSLocalizedString("nameMustNotBeLessThan2Characters", bundle: bundle, comment: "")
      }

      /// en translation: Name must not contain special characters
      ///
      /// Locales: en, ar
      static func nameMustNotContainSpecialCharacters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nameMustNotContainSpecialCharacters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nameMustNotContainSpecialCharacters"
        }

        return NSLocalizedString("nameMustNotContainSpecialCharacters", bundle: bundle, comment: "")
      }

      /// en translation: Number of items cannot be less than
      ///
      /// Locales: en, ar
      static func numberOfItemsCannotBeLessThan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("numberOfItemsCannotBeLessThan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "numberOfItemsCannotBeLessThan"
        }

        return NSLocalizedString("numberOfItemsCannotBeLessThan", bundle: bundle, comment: "")
      }

      /// en translation: Number of items cannot be more than
      ///
      /// Locales: en, ar
      static func numberOfItemsCannotBeMoreThan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("numberOfItemsCannotBeMoreThan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "numberOfItemsCannotBeMoreThan"
        }

        return NSLocalizedString("numberOfItemsCannotBeMoreThan", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ar
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }
        
        static func preview(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("preview", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "preview"
          }

          return NSLocalizedString("preview", bundle: bundle, comment: "")
        }
        
        static func change(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("change", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "change"
          }

          return NSLocalizedString("change", bundle: bundle, comment: "")
        }

      /// en translation: Open
      ///
      /// Locales: en, ar
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open"
        }

        return NSLocalizedString("open", bundle: bundle, comment: "")
      }

      /// en translation: Phone number is not valid
      ///
      /// Locales: en, ar
      static func phoneNumberIsNotValid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneNumberIsNotValid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phoneNumberIsNotValid"
        }

        return NSLocalizedString("phoneNumberIsNotValid", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter a strong password
      ///
      /// Locales: en, ar
      static func pleaseEnterStrongPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pleaseEnterStrongPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pleaseEnterStrongPassword"
        }

        return NSLocalizedString("pleaseEnterStrongPassword", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: en, ar
      static func remove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove"
        }

        return NSLocalizedString("remove", bundle: bundle, comment: "")
      }

      /// en translation: Selected files can't be more than
      ///
      /// Locales: en, ar
      static func selectedFilesCantBeMoreThan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectedFilesCantBeMoreThan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "selectedFilesCantBeMoreThan"
        }

        return NSLocalizedString("selectedFilesCantBeMoreThan", bundle: bundle, comment: "")
      }

      /// en translation: Strong
      ///
      /// Locales: en, ar
      static func strong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("strong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "strong"
        }

        return NSLocalizedString("strong", bundle: bundle, comment: "")
      }

      /// en translation: Very Strong
      ///
      /// Locales: en, ar
      static func veryStrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("veryStrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "veryStrong"
        }

        return NSLocalizedString("veryStrong", bundle: bundle, comment: "")
      }

      /// en translation: Very Weak
      ///
      /// Locales: en, ar
      static func veryWeak(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("veryWeak", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "veryWeak"
        }

        return NSLocalizedString("veryWeak", bundle: bundle, comment: "")
      }

      /// en translation: Weak
      ///
      /// Locales: en, ar
      static func weak(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weak", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weak"
        }

        return NSLocalizedString("weak", bundle: bundle, comment: "")
      }

      /// en translation: You can't pick more than
      ///
      /// Locales: en, ar
      static func youCantPickMoreThan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youCantPickMoreThan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "youCantPickMoreThan"
        }

        return NSLocalizedString("youCantPickMoreThan", bundle: bundle, comment: "")
      }

      /// en translation: You must select a date
      ///
      /// Locales: en, ar
      static func youMustSelectDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youMustSelectDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "youMustSelectDate"
        }

        return NSLocalizedString("youMustSelectDate", bundle: bundle, comment: "")
      }

      /// en translation: You must select a value
      ///
      /// Locales: en, ar
      static func youMustSelectValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youMustSelectValue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "youMustSelectValue"
        }

        return NSLocalizedString("youMustSelectValue", bundle: bundle, comment: "")
      }

        /// en translation: Field can not be empty
        ///
        /// Locales: en, ar
        static func fieldCantBeEmpty(preferredLanguages: [String]? = nil) -> String {
          guard let preferredLanguages = preferredLanguages else {
            return NSLocalizedString("fieldCantBeEmpty", bundle: hostingBundle, comment: "")
          }

          guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
            return "fieldCantBeEmpty"
          }

          return NSLocalizedString("fieldCantBeEmpty", bundle: bundle, comment: "")
        }
        
      /// en translation: You must select an item
      ///
      /// Locales: en, ar
      static func youMustSelectItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youMustSelectItem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "youMustSelectItem"
        }

        return NSLocalizedString("youMustSelectItem", bundle: bundle, comment: "")
      }

      /// en translation: files
      ///
      /// Locales: en, ar
      static func filesSmall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("filesSmall", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "filesSmall"
        }

        return NSLocalizedString("filesSmall", bundle: bundle, comment: "")
      }

      /// en translation: images
      ///
      /// Locales: en, ar
      static func imagesSmall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("imagesSmall", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "imagesSmall"
        }

        return NSLocalizedString("imagesSmall", bundle: bundle, comment: "")
      }

      /// en translation: items
      ///
      /// Locales: en, ar
      static func itemsSmall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemsSmall", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemsSmall"
        }

        return NSLocalizedString("itemsSmall", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ItemDetailsCell.validate()
    }

    struct _ConsentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConsentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ItemDetailsCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ItemDetailsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemDetailsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "IconCloseAttachment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IconCloseAttachment' is used in nib 'ItemDetailsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
